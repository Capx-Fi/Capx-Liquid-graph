// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Project extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("projectOwnerAddress", Value.fromBytes(Bytes.empty()));
    this.set("projectName", Value.fromString(""));
    this.set("projectTokenAddress", Value.fromBytes(Bytes.empty()));
    this.set("projectTokenTicker", Value.fromString(""));
    this.set("projectDocHash", Value.fromString(""));
    this.set("projectTokenDecimal", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Project entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Project must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Project", id.toString(), this);
    }
  }

  static load(id: string): Project | null {
    return changetype<Project | null>(store.get("Project", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get projectOwnerAddress(): Bytes {
    let value = this.get("projectOwnerAddress");
    return value!.toBytes();
  }

  set projectOwnerAddress(value: Bytes) {
    this.set("projectOwnerAddress", Value.fromBytes(value));
  }

  get projectName(): string {
    let value = this.get("projectName");
    return value!.toString();
  }

  set projectName(value: string) {
    this.set("projectName", Value.fromString(value));
  }

  get projectTokenAddress(): Bytes {
    let value = this.get("projectTokenAddress");
    return value!.toBytes();
  }

  set projectTokenAddress(value: Bytes) {
    this.set("projectTokenAddress", Value.fromBytes(value));
  }

  get projectTokenTicker(): string {
    let value = this.get("projectTokenTicker");
    return value!.toString();
  }

  set projectTokenTicker(value: string) {
    this.set("projectTokenTicker", Value.fromString(value));
  }

  get projectDocHash(): string {
    let value = this.get("projectDocHash");
    return value!.toString();
  }

  set projectDocHash(value: string) {
    this.set("projectDocHash", Value.fromString(value));
  }

  get projectTokenDecimal(): BigInt {
    let value = this.get("projectTokenDecimal");
    return value!.toBigInt();
  }

  set projectTokenDecimal(value: BigInt) {
    this.set("projectTokenDecimal", Value.fromBigInt(value));
  }
}
