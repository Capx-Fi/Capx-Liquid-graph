// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ProjectInfo extends ethereum.Event {
  get params(): ProjectInfo__Params {
    return new ProjectInfo__Params(this);
  }
}

export class ProjectInfo__Params {
  _event: ProjectInfo;

  constructor(event: ProjectInfo) {
    this._event = event;
  }

  get name(): string {
    return this._event.parameters[0].value.toString();
  }

  get tokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenTicker(): string {
    return this._event.parameters[2].value.toString();
  }

  get documentHash(): string {
    return this._event.parameters[3].value.toString();
  }

  get creator(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get tokenDecimal(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Master extends ethereum.SmartContract {
  static bind(address: Address): Master {
    return new Master("Master", address);
  }

  assetAddresstoProjectOwner(param0: Address): Address {
    let result = super.call(
      "assetAddresstoProjectOwner",
      "assetAddresstoProjectOwner(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toAddress();
  }

  try_assetAddresstoProjectOwner(
    param0: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "assetAddresstoProjectOwner",
      "assetAddresstoProjectOwner(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  liquidController(): Address {
    let result = super.call(
      "liquidController",
      "liquidController():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_liquidController(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "liquidController",
      "liquidController():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  liquidFactory(): Address {
    let result = super.call("liquidFactory", "liquidFactory():(address)", []);

    return result[0].toAddress();
  }

  try_liquidFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "liquidFactory",
      "liquidFactory():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  liquidProposal(): Address {
    let result = super.call("liquidProposal", "liquidProposal():(address)", []);

    return result[0].toAddress();
  }

  try_liquidProposal(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "liquidProposal",
      "liquidProposal():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenAddress(param0: BigInt): Address {
    let result = super.call("tokenAddress", "tokenAddress(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_tokenAddress(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tokenAddress",
      "tokenAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenAmount(param0: BigInt): BigInt {
    let result = super.call("tokenAmount", "tokenAmount(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_tokenAmount(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenAmount",
      "tokenAmount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenTime(param0: BigInt): BigInt {
    let result = super.call("tokenTime", "tokenTime(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_tokenTime(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tokenTime", "tokenTime(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenTransferable(param0: BigInt): boolean {
    let result = super.call(
      "tokenTransferable",
      "tokenTransferable(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBoolean();
  }

  try_tokenTransferable(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "tokenTransferable",
      "tokenTransferable(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  vestingController(): Address {
    let result = super.call(
      "vestingController",
      "vestingController():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_vestingController(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "vestingController",
      "vestingController():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getFactory(): Address {
    let result = super.call("getFactory", "getFactory():(address)", []);

    return result[0].toAddress();
  }

  try_getFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall("getFactory", "getFactory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getProposal(): Address {
    let result = super.call("getProposal", "getProposal():(address)", []);

    return result[0].toAddress();
  }

  try_getProposal(): ethereum.CallResult<Address> {
    let result = super.tryCall("getProposal", "getProposal():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class SetLiquidControllerCall extends ethereum.Call {
  get inputs(): SetLiquidControllerCall__Inputs {
    return new SetLiquidControllerCall__Inputs(this);
  }

  get outputs(): SetLiquidControllerCall__Outputs {
    return new SetLiquidControllerCall__Outputs(this);
  }
}

export class SetLiquidControllerCall__Inputs {
  _call: SetLiquidControllerCall;

  constructor(call: SetLiquidControllerCall) {
    this._call = call;
  }

  get _controller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetLiquidControllerCall__Outputs {
  _call: SetLiquidControllerCall;

  constructor(call: SetLiquidControllerCall) {
    this._call = call;
  }
}

export class SetLiquidFactoryCall extends ethereum.Call {
  get inputs(): SetLiquidFactoryCall__Inputs {
    return new SetLiquidFactoryCall__Inputs(this);
  }

  get outputs(): SetLiquidFactoryCall__Outputs {
    return new SetLiquidFactoryCall__Outputs(this);
  }
}

export class SetLiquidFactoryCall__Inputs {
  _call: SetLiquidFactoryCall;

  constructor(call: SetLiquidFactoryCall) {
    this._call = call;
  }

  get _factory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetLiquidFactoryCall__Outputs {
  _call: SetLiquidFactoryCall;

  constructor(call: SetLiquidFactoryCall) {
    this._call = call;
  }
}

export class SetLiquidProposalCall extends ethereum.Call {
  get inputs(): SetLiquidProposalCall__Inputs {
    return new SetLiquidProposalCall__Inputs(this);
  }

  get outputs(): SetLiquidProposalCall__Outputs {
    return new SetLiquidProposalCall__Outputs(this);
  }
}

export class SetLiquidProposalCall__Inputs {
  _call: SetLiquidProposalCall;

  constructor(call: SetLiquidProposalCall) {
    this._call = call;
  }

  get _proposal(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetLiquidProposalCall__Outputs {
  _call: SetLiquidProposalCall;

  constructor(call: SetLiquidProposalCall) {
    this._call = call;
  }
}

export class SetVestingControllerCall extends ethereum.Call {
  get inputs(): SetVestingControllerCall__Inputs {
    return new SetVestingControllerCall__Inputs(this);
  }

  get outputs(): SetVestingControllerCall__Outputs {
    return new SetVestingControllerCall__Outputs(this);
  }
}

export class SetVestingControllerCall__Inputs {
  _call: SetVestingControllerCall;

  constructor(call: SetVestingControllerCall) {
    this._call = call;
  }

  get _controller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetVestingControllerCall__Outputs {
  _call: SetVestingControllerCall;

  constructor(call: SetVestingControllerCall) {
    this._call = call;
  }
}

export class CreateBulkDerivativeCall extends ethereum.Call {
  get inputs(): CreateBulkDerivativeCall__Inputs {
    return new CreateBulkDerivativeCall__Inputs(this);
  }

  get outputs(): CreateBulkDerivativeCall__Outputs {
    return new CreateBulkDerivativeCall__Outputs(this);
  }
}

export class CreateBulkDerivativeCall__Inputs {
  _call: CreateBulkDerivativeCall;

  constructor(call: CreateBulkDerivativeCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _documentHash(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _amount(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get _liquid_distAddress(): Array<Address> {
    return this._call.inputValues[4].value.toAddressArray();
  }

  get _liquid_distTime(): Array<BigInt> {
    return this._call.inputValues[5].value.toBigIntArray();
  }

  get _liquid_distAmount(): Array<BigInt> {
    return this._call.inputValues[6].value.toBigIntArray();
  }

  get _liquid_transferable(): Array<boolean> {
    return this._call.inputValues[7].value.toBooleanArray();
  }

  get _vesting_distAddress(): Array<Address> {
    return this._call.inputValues[8].value.toAddressArray();
  }

  get _vesting_distTime(): Array<BigInt> {
    return this._call.inputValues[9].value.toBigIntArray();
  }

  get _vesting_distAmount(): Array<BigInt> {
    return this._call.inputValues[10].value.toBigIntArray();
  }
}

export class CreateBulkDerivativeCall__Outputs {
  _call: CreateBulkDerivativeCall;

  constructor(call: CreateBulkDerivativeCall) {
    this._call = call;
  }
}

export class WithdrawTokenCall extends ethereum.Call {
  get inputs(): WithdrawTokenCall__Inputs {
    return new WithdrawTokenCall__Inputs(this);
  }

  get outputs(): WithdrawTokenCall__Outputs {
    return new WithdrawTokenCall__Outputs(this);
  }
}

export class WithdrawTokenCall__Inputs {
  _call: WithdrawTokenCall;

  constructor(call: WithdrawTokenCall) {
    this._call = call;
  }

  get _wrappedTokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawTokenCall__Outputs {
  _call: WithdrawTokenCall;

  constructor(call: WithdrawTokenCall) {
    this._call = call;
  }
}

export class WithdrawVestingLockCall extends ethereum.Call {
  get inputs(): WithdrawVestingLockCall__Inputs {
    return new WithdrawVestingLockCall__Inputs(this);
  }

  get outputs(): WithdrawVestingLockCall__Outputs {
    return new WithdrawVestingLockCall__Outputs(this);
  }
}

export class WithdrawVestingLockCall__Inputs {
  _call: WithdrawVestingLockCall;

  constructor(call: WithdrawVestingLockCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawVestingLockCall__Outputs {
  _call: WithdrawVestingLockCall;

  constructor(call: WithdrawVestingLockCall) {
    this._call = call;
  }
}

export class TransferVestingLockCall extends ethereum.Call {
  get inputs(): TransferVestingLockCall__Inputs {
    return new TransferVestingLockCall__Inputs(this);
  }

  get outputs(): TransferVestingLockCall__Outputs {
    return new TransferVestingLockCall__Outputs(this);
  }
}

export class TransferVestingLockCall__Inputs {
  _call: TransferVestingLockCall;

  constructor(call: TransferVestingLockCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _receiverAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class TransferVestingLockCall__Outputs {
  _call: TransferVestingLockCall;

  constructor(call: TransferVestingLockCall) {
    this._call = call;
  }
}
