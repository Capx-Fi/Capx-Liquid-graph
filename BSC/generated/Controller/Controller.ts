// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class CreateVest extends ethereum.Event {
  get params(): CreateVest__Params {
    return new CreateVest__Params(this);
  }
}

export class CreateVest__Params {
  _event: CreateVest;

  constructor(event: CreateVest) {
    this._event = event;
  }

  get assetAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get creator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get userAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get userAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get unlockTime(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get wrappedERC20Address(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get wrappedAssetTicker(): string {
    return this._event.parameters[6].value.toString();
  }

  get transferable(): boolean {
    return this._event.parameters[7].value.toBoolean();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ProjectInfo extends ethereum.Event {
  get params(): ProjectInfo__Params {
    return new ProjectInfo__Params(this);
  }
}

export class ProjectInfo__Params {
  _event: ProjectInfo;

  constructor(event: ProjectInfo) {
    this._event = event;
  }

  get tokenAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenTicker(): string {
    return this._event.parameters[1].value.toString();
  }

  get creator(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenDecimal(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class TransferWrapped extends ethereum.Event {
  get params(): TransferWrapped__Params {
    return new TransferWrapped__Params(this);
  }
}

export class TransferWrapped__Params {
  _event: TransferWrapped;

  constructor(event: TransferWrapped) {
    this._event = event;
  }

  get userAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get wrappedTokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get receiverAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get userAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get wrappedTokenAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Controller__assetToDerivativeMapResult {
  value0: Address;
  value1: Address;

  constructor(value0: Address, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }

  getSellable(): Address {
    return this.value0;
  }

  getNonsellable(): Address {
    return this.value1;
  }
}

export class Controller extends ethereum.SmartContract {
  static bind(address: Address): Controller {
    return new Controller("Controller", address);
  }

  assetAddresstoProjectOwner(param0: Address): Address {
    let result = super.call(
      "assetAddresstoProjectOwner",
      "assetAddresstoProjectOwner(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toAddress();
  }

  try_assetAddresstoProjectOwner(
    param0: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "assetAddresstoProjectOwner",
      "assetAddresstoProjectOwner(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  assetLockedForDerivative(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "assetLockedForDerivative",
      "assetLockedForDerivative(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_assetLockedForDerivative(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "assetLockedForDerivative",
      "assetLockedForDerivative(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  assetToDerivativeMap(
    param0: Address,
    param1: BigInt
  ): Controller__assetToDerivativeMapResult {
    let result = super.call(
      "assetToDerivativeMap",
      "assetToDerivativeMap(address,uint256):(address,address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new Controller__assetToDerivativeMapResult(
      result[0].toAddress(),
      result[1].toAddress()
    );
  }

  try_assetToDerivativeMap(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<Controller__assetToDerivativeMapResult> {
    let result = super.tryCall(
      "assetToDerivativeMap",
      "assetToDerivativeMap(address,uint256):(address,address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Controller__assetToDerivativeMapResult(
        value[0].toAddress(),
        value[1].toAddress()
      )
    );
  }

  derivativeAdrToActualAssetAdr(param0: Address): Address {
    let result = super.call(
      "derivativeAdrToActualAssetAdr",
      "derivativeAdrToActualAssetAdr(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toAddress();
  }

  try_derivativeAdrToActualAssetAdr(
    param0: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "derivativeAdrToActualAssetAdr",
      "derivativeAdrToActualAssetAdr(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  derivativeIDtoAddress(param0: BigInt): Address {
    let result = super.call(
      "derivativeIDtoAddress",
      "derivativeIDtoAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_derivativeIDtoAddress(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "derivativeIDtoAddress",
      "derivativeIDtoAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lastVestID(): BigInt {
    let result = super.call("lastVestID", "lastVestID():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lastVestID(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lastVestID", "lastVestID():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalDerivativeForAsset(param0: Address): BigInt {
    let result = super.call(
      "totalDerivativeForAsset",
      "totalDerivativeForAsset(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_totalDerivativeForAsset(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalDerivativeForAsset",
      "totalDerivativeForAsset(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vestingTimeOfTokenId(param0: Address): BigInt {
    let result = super.call(
      "vestingTimeOfTokenId",
      "vestingTimeOfTokenId(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_vestingTimeOfTokenId(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "vestingTimeOfTokenId",
      "vestingTimeOfTokenId(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}

export class KillCall extends ethereum.Call {
  get inputs(): KillCall__Inputs {
    return new KillCall__Inputs(this);
  }

  get outputs(): KillCall__Outputs {
    return new KillCall__Outputs(this);
  }
}

export class KillCall__Inputs {
  _call: KillCall;

  constructor(call: KillCall) {
    this._call = call;
  }
}

export class KillCall__Outputs {
  _call: KillCall;

  constructor(call: KillCall) {
    this._call = call;
  }
}

export class ReviveCall extends ethereum.Call {
  get inputs(): ReviveCall__Inputs {
    return new ReviveCall__Inputs(this);
  }

  get outputs(): ReviveCall__Outputs {
    return new ReviveCall__Outputs(this);
  }
}

export class ReviveCall__Inputs {
  _call: ReviveCall;

  constructor(call: ReviveCall) {
    this._call = call;
  }
}

export class ReviveCall__Outputs {
  _call: ReviveCall;

  constructor(call: ReviveCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _masterContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class CreateBulkDerivativeCall extends ethereum.Call {
  get inputs(): CreateBulkDerivativeCall__Inputs {
    return new CreateBulkDerivativeCall__Inputs(this);
  }

  get outputs(): CreateBulkDerivativeCall__Outputs {
    return new CreateBulkDerivativeCall__Outputs(this);
  }
}

export class CreateBulkDerivativeCall__Inputs {
  _call: CreateBulkDerivativeCall;

  constructor(call: CreateBulkDerivativeCall) {
    this._call = call;
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _distAddress(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get _distTime(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get _distAmount(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }

  get _transferable(): Array<boolean> {
    return this._call.inputValues[5].value.toBooleanArray();
  }

  get _caller(): Address {
    return this._call.inputValues[6].value.toAddress();
  }
}

export class CreateBulkDerivativeCall__Outputs {
  _call: CreateBulkDerivativeCall;

  constructor(call: CreateBulkDerivativeCall) {
    this._call = call;
  }
}

export class TokenTransferCall extends ethereum.Call {
  get inputs(): TokenTransferCall__Inputs {
    return new TokenTransferCall__Inputs(this);
  }

  get outputs(): TokenTransferCall__Outputs {
    return new TokenTransferCall__Outputs(this);
  }
}

export class TokenTransferCall__Inputs {
  _call: TokenTransferCall;

  constructor(call: TokenTransferCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TokenTransferCall__Outputs {
  _call: TokenTransferCall;

  constructor(call: TokenTransferCall) {
    this._call = call;
  }
}

export class WithdrawTokenCall extends ethereum.Call {
  get inputs(): WithdrawTokenCall__Inputs {
    return new WithdrawTokenCall__Inputs(this);
  }

  get outputs(): WithdrawTokenCall__Outputs {
    return new WithdrawTokenCall__Outputs(this);
  }
}

export class WithdrawTokenCall__Inputs {
  _call: WithdrawTokenCall;

  constructor(call: WithdrawTokenCall) {
    this._call = call;
  }

  get _wrappedTokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _caller(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class WithdrawTokenCall__Outputs {
  _call: WithdrawTokenCall;

  constructor(call: WithdrawTokenCall) {
    this._call = call;
  }
}
