type Project @entity {
  id: ID!
  projectOwnerAddress: Bytes! 
  projectName: String!
  projectTokenAddress: Bytes!
  projectTokenTicker: String!
  projectDocHash: String!
  projectTokenDecimal: BigInt!
  derivatives: [Derivative!]! @derivedFrom(field: "projectID")
  locks: [Lock!]! @derivedFrom(field:"projectID")
}

type Derivative @entity {
  id: ID!
  wrappedTokenTicker: String!
  unlockTime: BigInt!
  totalSupply: BigInt!
  holders: [UserHolding!]! @derivedFrom(field: "derivativeID")
  projectID: Project!
}

type UserHolding @entity {
  id: ID!
  address: Bytes!
  tokenAmount: BigInt!
  totalAllocated: BigInt!
  totalWithdrawn: BigInt!
  totalTransferred: BigInt!
  derivativeID: Derivative!
}

type Lock @entity {
  id: ID!
  address: Bytes!
  tokenAmount: BigInt!
  totalAllocated: BigInt!
  totalWithdrawn: BigInt!
  unlockTime: BigInt!
  vestID: BigInt!
  projectID: Project!
}

type Withdrawal @entity {
  id: ID!
  txHash: Bytes!
  token: Bytes!
  vestID: BigInt!
  from: Bytes!
  amount: BigInt!
}

type Transfer @entity {
  id: ID!
  txHash: Bytes!
  token: Bytes!
  vestID: BigInt!
  from: Bytes!
  to: Bytes!
  amount: BigInt!
}