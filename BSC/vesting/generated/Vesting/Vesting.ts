// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class CreateVest extends ethereum.Event {
  get params(): CreateVest__Params {
    return new CreateVest__Params(this);
  }
}

export class CreateVest__Params {
  _event: CreateVest;

  constructor(event: CreateVest) {
    this._event = event;
  }

  get vestID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get assetAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get creator(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get userAddress(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get userAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get unlockTime(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ProjectInfo extends ethereum.Event {
  get params(): ProjectInfo__Params {
    return new ProjectInfo__Params(this);
  }
}

export class ProjectInfo__Params {
  _event: ProjectInfo;

  constructor(event: ProjectInfo) {
    this._event = event;
  }

  get creator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TransferLock extends ethereum.Event {
  get params(): TransferLock__Params {
    return new TransferLock__Params(this);
  }
}

export class TransferLock__Params {
  _event: TransferLock;

  constructor(event: TransferLock) {
    this._event = event;
  }

  get userAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get wrappedTokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get receiverAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get unlockTime(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get userAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get wrappedTokenAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get unlockTime(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Vesting__lockedTokenResult {
  value0: Address;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: boolean;

  constructor(
    value0: Address,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    return map;
  }
}

export class Vesting extends ethereum.SmartContract {
  static bind(address: Address): Vesting {
    return new Vesting("Vesting", address);
  }

  lockId(): BigInt {
    let result = super.call("lockId", "lockId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lockId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lockId", "lockId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lockedToken(param0: BigInt): Vesting__lockedTokenResult {
    let result = super.call(
      "lockedToken",
      "lockedToken(uint256):(address,address,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Vesting__lockedTokenResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBoolean()
    );
  }

  try_lockedToken(
    param0: BigInt
  ): ethereum.CallResult<Vesting__lockedTokenResult> {
    let result = super.tryCall(
      "lockedToken",
      "lockedToken(uint256):(address,address,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Vesting__lockedTokenResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBoolean()
      )
    );
  }

  lockedTokenBalance(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "lockedTokenBalance",
      "lockedTokenBalance(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_lockedTokenBalance(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lockedTokenBalance",
      "lockedTokenBalance(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  masterController(): Address {
    let result = super.call(
      "masterController",
      "masterController():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_masterController(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "masterController",
      "masterController():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  newOwner(): Address {
    let result = super.call("newOwner", "newOwner():(address)", []);

    return result[0].toAddress();
  }

  try_newOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("newOwner", "newOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class SetMasterCall extends ethereum.Call {
  get inputs(): SetMasterCall__Inputs {
    return new SetMasterCall__Inputs(this);
  }

  get outputs(): SetMasterCall__Outputs {
    return new SetMasterCall__Outputs(this);
  }
}

export class SetMasterCall__Inputs {
  _call: SetMasterCall;

  constructor(call: SetMasterCall) {
    this._call = call;
  }

  get _master(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetMasterCall__Outputs {
  _call: SetMasterCall;

  constructor(call: SetMasterCall) {
    this._call = call;
  }
}

export class LockTokensCall extends ethereum.Call {
  get inputs(): LockTokensCall__Inputs {
    return new LockTokensCall__Inputs(this);
  }

  get outputs(): LockTokensCall__Outputs {
    return new LockTokensCall__Outputs(this);
  }
}

export class LockTokensCall__Inputs {
  _call: LockTokensCall;

  constructor(call: LockTokensCall) {
    this._call = call;
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _lockOwner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _withdrawalAddress(): Array<Address> {
    return this._call.inputValues[3].value.toAddressArray();
  }

  get _distAmount(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }

  get _unlockTime(): Array<BigInt> {
    return this._call.inputValues[5].value.toBigIntArray();
  }
}

export class LockTokensCall__Outputs {
  _call: LockTokensCall;

  constructor(call: LockTokensCall) {
    this._call = call;
  }
}

export class TransferLocksCall extends ethereum.Call {
  get inputs(): TransferLocksCall__Inputs {
    return new TransferLocksCall__Inputs(this);
  }

  get outputs(): TransferLocksCall__Outputs {
    return new TransferLocksCall__Outputs(this);
  }
}

export class TransferLocksCall__Inputs {
  _call: TransferLocksCall;

  constructor(call: TransferLocksCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _receiverAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _caller(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class TransferLocksCall__Outputs {
  _call: TransferLocksCall;

  constructor(call: TransferLocksCall) {
    this._call = call;
  }
}

export class WithdrawTokensCall extends ethereum.Call {
  get inputs(): WithdrawTokensCall__Inputs {
    return new WithdrawTokensCall__Inputs(this);
  }

  get outputs(): WithdrawTokensCall__Outputs {
    return new WithdrawTokensCall__Outputs(this);
  }
}

export class WithdrawTokensCall__Inputs {
  _call: WithdrawTokensCall;

  constructor(call: WithdrawTokensCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _caller(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class WithdrawTokensCall__Outputs {
  _call: WithdrawTokensCall;

  constructor(call: WithdrawTokensCall) {
    this._call = call;
  }
}
