// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Project extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("projectOwnerAddress", Value.fromBytes(Bytes.empty()));
    this.set("projectName", Value.fromString(""));
    this.set("projectTokenAddress", Value.fromBytes(Bytes.empty()));
    this.set("projectTokenTicker", Value.fromString(""));
    this.set("projectDocHash", Value.fromString(""));
    this.set("projectTokenDecimal", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Project entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Project must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Project", id.toString(), this);
    }
  }

  static load(id: string): Project | null {
    return changetype<Project | null>(store.get("Project", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get projectOwnerAddress(): Bytes {
    let value = this.get("projectOwnerAddress");
    return value!.toBytes();
  }

  set projectOwnerAddress(value: Bytes) {
    this.set("projectOwnerAddress", Value.fromBytes(value));
  }

  get projectName(): string {
    let value = this.get("projectName");
    return value!.toString();
  }

  set projectName(value: string) {
    this.set("projectName", Value.fromString(value));
  }

  get projectTokenAddress(): Bytes {
    let value = this.get("projectTokenAddress");
    return value!.toBytes();
  }

  set projectTokenAddress(value: Bytes) {
    this.set("projectTokenAddress", Value.fromBytes(value));
  }

  get projectTokenTicker(): string {
    let value = this.get("projectTokenTicker");
    return value!.toString();
  }

  set projectTokenTicker(value: string) {
    this.set("projectTokenTicker", Value.fromString(value));
  }

  get projectDocHash(): string {
    let value = this.get("projectDocHash");
    return value!.toString();
  }

  set projectDocHash(value: string) {
    this.set("projectDocHash", Value.fromString(value));
  }

  get projectTokenDecimal(): BigInt {
    let value = this.get("projectTokenDecimal");
    return value!.toBigInt();
  }

  set projectTokenDecimal(value: BigInt) {
    this.set("projectTokenDecimal", Value.fromBigInt(value));
  }

  get derivatives(): Array<string> {
    let value = this.get("derivatives");
    return value!.toStringArray();
  }

  set derivatives(value: Array<string>) {
    this.set("derivatives", Value.fromStringArray(value));
  }

  get locks(): Array<string> {
    let value = this.get("locks");
    return value!.toStringArray();
  }

  set locks(value: Array<string>) {
    this.set("locks", Value.fromStringArray(value));
  }
}

export class Derivative extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("wrappedTokenTicker", Value.fromString(""));
    this.set("unlockTime", Value.fromBigInt(BigInt.zero()));
    this.set("totalSupply", Value.fromBigInt(BigInt.zero()));
    this.set("projectID", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Derivative entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Derivative must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Derivative", id.toString(), this);
    }
  }

  static load(id: string): Derivative | null {
    return changetype<Derivative | null>(store.get("Derivative", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get wrappedTokenTicker(): string {
    let value = this.get("wrappedTokenTicker");
    return value!.toString();
  }

  set wrappedTokenTicker(value: string) {
    this.set("wrappedTokenTicker", Value.fromString(value));
  }

  get unlockTime(): BigInt {
    let value = this.get("unlockTime");
    return value!.toBigInt();
  }

  set unlockTime(value: BigInt) {
    this.set("unlockTime", Value.fromBigInt(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value!.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get holders(): Array<string> {
    let value = this.get("holders");
    return value!.toStringArray();
  }

  set holders(value: Array<string>) {
    this.set("holders", Value.fromStringArray(value));
  }

  get projectID(): string {
    let value = this.get("projectID");
    return value!.toString();
  }

  set projectID(value: string) {
    this.set("projectID", Value.fromString(value));
  }
}

export class UserHolding extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("address", Value.fromBytes(Bytes.empty()));
    this.set("tokenAmount", Value.fromBigInt(BigInt.zero()));
    this.set("totalAllocated", Value.fromBigInt(BigInt.zero()));
    this.set("totalWithdrawn", Value.fromBigInt(BigInt.zero()));
    this.set("totalTransferred", Value.fromBigInt(BigInt.zero()));
    this.set("derivativeID", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserHolding entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UserHolding must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UserHolding", id.toString(), this);
    }
  }

  static load(id: string): UserHolding | null {
    return changetype<UserHolding | null>(store.get("UserHolding", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get tokenAmount(): BigInt {
    let value = this.get("tokenAmount");
    return value!.toBigInt();
  }

  set tokenAmount(value: BigInt) {
    this.set("tokenAmount", Value.fromBigInt(value));
  }

  get totalAllocated(): BigInt {
    let value = this.get("totalAllocated");
    return value!.toBigInt();
  }

  set totalAllocated(value: BigInt) {
    this.set("totalAllocated", Value.fromBigInt(value));
  }

  get totalWithdrawn(): BigInt {
    let value = this.get("totalWithdrawn");
    return value!.toBigInt();
  }

  set totalWithdrawn(value: BigInt) {
    this.set("totalWithdrawn", Value.fromBigInt(value));
  }

  get totalTransferred(): BigInt {
    let value = this.get("totalTransferred");
    return value!.toBigInt();
  }

  set totalTransferred(value: BigInt) {
    this.set("totalTransferred", Value.fromBigInt(value));
  }

  get derivativeID(): string {
    let value = this.get("derivativeID");
    return value!.toString();
  }

  set derivativeID(value: string) {
    this.set("derivativeID", Value.fromString(value));
  }
}

export class Lock extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("address", Value.fromBytes(Bytes.empty()));
    this.set("tokenAmount", Value.fromBigInt(BigInt.zero()));
    this.set("unlockTime", Value.fromBigInt(BigInt.zero()));
    this.set("vestID", Value.fromBigInt(BigInt.zero()));
    this.set("projectID", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Lock entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Lock must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Lock", id.toString(), this);
    }
  }

  static load(id: string): Lock | null {
    return changetype<Lock | null>(store.get("Lock", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get tokenAmount(): BigInt {
    let value = this.get("tokenAmount");
    return value!.toBigInt();
  }

  set tokenAmount(value: BigInt) {
    this.set("tokenAmount", Value.fromBigInt(value));
  }

  get unlockTime(): BigInt {
    let value = this.get("unlockTime");
    return value!.toBigInt();
  }

  set unlockTime(value: BigInt) {
    this.set("unlockTime", Value.fromBigInt(value));
  }

  get vestID(): BigInt {
    let value = this.get("vestID");
    return value!.toBigInt();
  }

  set vestID(value: BigInt) {
    this.set("vestID", Value.fromBigInt(value));
  }

  get projectID(): string {
    let value = this.get("projectID");
    return value!.toString();
  }

  set projectID(value: string) {
    this.set("projectID", Value.fromString(value));
  }
}

export class Withdrawal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("txHash", Value.fromBytes(Bytes.empty()));
    this.set("token", Value.fromBytes(Bytes.empty()));
    this.set("vestID", Value.fromBigInt(BigInt.zero()));
    this.set("from", Value.fromBytes(Bytes.empty()));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Withdrawal entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Withdrawal must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Withdrawal", id.toString(), this);
    }
  }

  static load(id: string): Withdrawal | null {
    return changetype<Withdrawal | null>(store.get("Withdrawal", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value!.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value!.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get vestID(): BigInt {
    let value = this.get("vestID");
    return value!.toBigInt();
  }

  set vestID(value: BigInt) {
    this.set("vestID", Value.fromBigInt(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class Transfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("txHash", Value.fromBytes(Bytes.empty()));
    this.set("token", Value.fromBytes(Bytes.empty()));
    this.set("vestID", Value.fromBigInt(BigInt.zero()));
    this.set("from", Value.fromBytes(Bytes.empty()));
    this.set("to", Value.fromBytes(Bytes.empty()));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transfer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Transfer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Transfer", id.toString(), this);
    }
  }

  static load(id: string): Transfer | null {
    return changetype<Transfer | null>(store.get("Transfer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value!.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value!.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get vestID(): BigInt {
    let value = this.get("vestID");
    return value!.toBigInt();
  }

  set vestID(value: BigInt) {
    this.set("vestID", Value.fromBigInt(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value!.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}
